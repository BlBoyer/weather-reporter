When geolocations are parseFloated or other functions are applied, the report doesn't generate, and somehow uses a cached version.

The api call keeps executing.-dependencies are update and generate report
--fix, used the isActive bool, since generateReport sets it. The ideal way is to use a useCallback to define the generateReport function; 
--I believe this because the latlon is set after the bool is set and it isn't an async function, we could set the bool after, but when
--there isn't a bool, use useCallback.
--Actual problem is that the generateReport function is remade on every re-render, so it causes a new instance and hence, dependency change

The parseFloat returns a number, but the .toFixed, and .toPrecision, convert the number to string.
--fix, used Number() function

The position is being set on update, so, it updates the latlon object after updating on generate report once
-fixed by using the isActive bool to call new pos fix

getting an older report every time, not sure why this was happening

--fetch url has the end accent as part of string, but as console-logged it's OK

Alert doesn't seem to be updating
--zone is being passed down as undefined and set before the useeffect completes, therefore: no re-render
--fixed

old report issue, my current time is a day ahead for some reason reading the 30th instead of the 29th, 
and so we're pulling the wrong data which may or may not exist on the api
--maybe this is a current time zone error, this was time format difference between generated time and period time
--I think we need to force generate a new report or wait for the right report to get out
--fix: for now, we check the generted time and match the day, then loop through the periods, breaking the loop at the startTime
a problem exists when referencing the period startTime bc our current time is in UTC,
somehow we need to convert the local time to utc, so it works when checking other areas as well
--Remove the -8:00 from the local date and create a new date object it will automatically recognize as
--a local date bc it doesn't have a Z specifier, then convert to ISO
--Worked!

my error handling isn't working, might need to make a dedicated function to process erros with my own error codes

Invalid DOM nesting <p> cannot appear as descendant of <p>
-this happens when a tag of one type is trying to be set twice, i.e. <p><p>Text</p><p>

invalid isn't changing in render method even though the state updates, consider using it as a property that can't bee seen,
or organize router to see diff pages, this may be the most useful in order to display other props such as the 3-day rep.
